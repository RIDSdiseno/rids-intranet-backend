generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Empresa {
  id_empresa      Int                   @id @default(autoincrement())
  nombre          String                @unique
  solicitantes    Solicitante[]
  visitas         Visita[]              @relation("Empresa_Visita")
  tickets         FreshdeskTicket[]
  companyMaps     FreshdeskCompanyMap[]
  detalleEmpresa  DetalleEmpresa?
  id_empresa   Int                   @id @default(autoincrement())
  nombre       String                @unique
  solicitantes Solicitante[]
  visitas      Visita[]              @relation("Empresa_Visita")
  tickets      FreshdeskTicket[]
  companyMaps  FreshdeskCompanyMap[]
  
  detalleEmpresa DetalleEmpresa?
  detalleTrabajos DetalleTrabajo[]
}

model DetalleEmpresa {
  id         Int     @id @default(autoincrement())
  rut        String  @unique
  direccion  String
  telefono   String
  email      String
  empresa_id Int     @unique
  empresa    Empresa @relation(fields: [empresa_id], references: [id_empresa], onDelete: Cascade)

  @@map("detalle_empresas")
}

model Solicitante {
  id_solicitante Int                     @id @default(autoincrement())
  nombre         String
  email          String?
  telefono       String?
  empresaId      Int
  clienteId      Int?                    @unique
  empresa        Empresa                 @relation(fields: [empresaId], references: [id_empresa])
  equipos        Equipo[]
  visitas        Visita[]                @relation("Solicitante_Visita")
  historiales    Historial[]             @relation("Solicitante_Historial")
  tickets        FreshdeskTicket[]
  requesterMaps  FreshdeskRequesterMap[]
  cliente        Cliente?                @relation("ClienteSolicitante", fields: [clienteId], references: [id])

  clienteId      Int?          @unique
  cliente        Cliente?      @relation("ClienteSolicitante", fields: [clienteId], references: [id])

  @@index([empresaId])
}

model Cliente {
  id          Int          @id @default(autoincrement())
  nombre      String
  telefono    String
  email       String       @unique
  solicitante Solicitante? @relation("ClienteSolicitante")
}

model Equipo {
  id_equipo       Int              @id @default(autoincrement())
  idSolicitante   Int
  serial          String
  marca           String
  modelo          String
  procesador      String
  ram             String
  disco           String
  propiedad       String
  solicitante     Solicitante      @relation(fields: [idSolicitante], references: [id_solicitante])
  equipo          DetalleEquipo[]
  detalleTrabajos DetalleTrabajo[]

  @@index([idSolicitante])
}

model EquipoProducto {
  id            Int      @id @default(autoincrement())
  nombre        String
  descripcion   String?
  precio        Decimal
  stock         Int      @default(0)
  marca         String
  modelo        String
  estado        String
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
}

model DetalleEquipo {
  id         Int     @id @default(autoincrement()) @map("id_detalle_equipo")
  idEquipo   Int
  macWifi    String?
  so         String?
  tipoDd     String?
  estadoAlm  String?
  office     String?
  teamViewer String?
  claveTv    String?
  revisado   String?
  equipo     Equipo? @relation(fields: [idEquipo], references: [id_equipo])

  @@index([idEquipo])
}

model DetalleTrabajo {
  id            Int       @id @default(autoincrement())
  fecha_ingreso DateTime
  fecha_egreso  DateTime?
  trabajo       String
  accesorios    String?
  prioridad     Prioridad
  estado        String
  notas         String?
  empresa_id    Int?
  equipo_id     Int?
  tecnico_id    Int?
  empresa       Empresa?  @relation(fields: [empresa_id], references: [id_empresa])
  equipo        Equipo?   @relation(fields: [equipo_id], references: [id_equipo])
  tecnico       Tecnico?  @relation(fields: [tecnico_id], references: [id_tecnico])

  @@map("detalle_trabajos")
}

model Historial {
  tecnicoId          Int
  solicitante        String
  inicio             DateTime
  fin                DateTime
  realizado          String?
  solicitanteId      Int
  actualizaciones    Boolean     @default(false)
  antivirus          Boolean     @default(false)
  ccleaner           Boolean     @default(false)
  estadoDisco        Boolean     @default(false)
  licenciaOffice     Boolean     @default(false)
  licenciaWindows    Boolean     @default(false)
  mantenimientoReloj Boolean     @default(false)
  rendimientoEquipo  Boolean     @default(false)
  id_historial       Int         @id @default(autoincrement())
  tecnico            Tecnico     @relation(fields: [tecnicoId], references: [id_tecnico])
  solicitanteRef     Solicitante @relation("Solicitante_Historial", fields: [solicitanteId], references: [id_solicitante])

  @@index([tecnicoId])
  @@index([solicitanteId])
}

model RefreshToken {
  id                Int       @id @default(autoincrement())
  userId            Int
  rtHash            String
  createdAt         DateTime  @default(now())
  expiresAt         DateTime
  revokedAt         DateTime?
  replacedByTokenId Int?
  userAgent         String?
  ip                String?
  user              Tecnico   @relation(fields: [userId], references: [id_tecnico])

  @@index([rtHash])
  @@index([userId])
}

model Tecnico {
  id_tecnico      Int              @id @default(autoincrement())
  nombre          String
  email           String           @unique
  passwordHash    String
  status          Boolean          @default(true)
  tokens          RefreshToken[]
  historiales     Historial[]
  visitas         Visita[]
  detalleTrabajos DetalleTrabajo[]
}

model Visita {
  id_visita          Int          @id @default(autoincrement())
  empresaId          Int
  tecnicoId          Int
  solicitante        String
  inicio             DateTime
  fin                DateTime?
  confImpresoras     Boolean      @default(false)
  confTelefonos      Boolean      @default(false)
  confPiePagina      Boolean      @default(false)
  otros              Boolean      @default(false)
  otrosDetalle       String?
  status             EstadoVisita @default(PENDIENTE)
  solicitanteId      Int?
  actualizaciones    Boolean      @default(false)
  antivirus          Boolean      @default(false)
  ccleaner           Boolean      @default(false)
  estadoDisco        Boolean      @default(false)
  licenciaOffice     Boolean      @default(false)
  licenciaWindows    Boolean      @default(false)
  mantenimientoReloj Boolean      @default(false)
  rendimientoEquipo  Boolean      @default(false)
  empresa            Empresa      @relation("Empresa_Visita", fields: [empresaId], references: [id_empresa])
  tecnico            Tecnico      @relation(fields: [tecnicoId], references: [id_tecnico])
  solicitanteRef     Solicitante? @relation("Solicitante_Visita", fields: [solicitanteId], references: [id_solicitante])

  @@index([empresaId])
  @@index([tecnicoId])
  @@index([solicitanteId])
}

/// * LEGADO: ya no lo usa el flujo nuevo de tickets
model FreshdeskCompanyMap {
  companyId BigInt  @id
  empresaId Int
  domain    String?
  empresa   Empresa @relation(fields: [empresaId], references: [id_empresa])

  @@index([empresaId])
  @@index([domain])
}

/// * LEGADO: ya no lo usa el flujo nuevo de tickets
model FreshdeskRequesterMap {
  requesterId   BigInt      @id
  solicitanteId Int
  empresaId     Int
  solicitante   Solicitante @relation(fields: [solicitanteId], references: [id_solicitante])

  @@index([empresaId])
  @@index([solicitanteId])
}

/// * CENTRAL: Ticket de Freshdesk (ahora referenciado a TicketOrg y TicketRequester)
model FreshdeskTicket {
  id                BigInt           @id
  subject           String
  status            Int
  priority          Int
  type              String?
  requesterEmail    String?
  createdAt         DateTime
  updatedAt         DateTime
  source            String?
  capturedAt        DateTime?
  empresaId         Int?
  solicitanteId     Int?
  ticketOrgId       Int?
  ticketRequesterId Int?
  empresa           Empresa?         @relation(fields: [empresaId], references: [id_empresa])
  solicitante       Solicitante?     @relation(fields: [solicitanteId], references: [id_solicitante])
  ticketOrg         TicketOrg?       @relation(fields: [ticketOrgId], references: [id])
  ticketRequester   TicketRequester? @relation(fields: [ticketRequesterId], references: [id])

  @@index([empresaId])
  @@index([solicitanteId])
  @@index([ticketOrgId])
  @@index([ticketRequesterId])
  @@index([requesterEmail])
  @@index([createdAt])
}

/// * Agrupación lógica de tickets (no toca tu Empresa)
model TicketOrg {
  id         Int               @id @default(autoincrement())
  name       String            @unique
  notes      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  maps       FdSourceMap[]
  tickets    FreshdeskTicket[]
  requesters TicketRequester[]
}

/// * Mapa domain/companyId → TicketOrg
model FdSourceMap {
  id          Int       @id @default(autoincrement())
  companyId   BigInt?   @unique
  domain      String?   @unique
  ticketOrgId Int
  ticketOrg   TicketOrg @relation(fields: [ticketOrgId], references: [id])

  @@index([ticketOrgId])
}

/// * NUEVO: solicitante “propio” de tickets (se deduplica por email o fdRequesterId)
model TicketRequester {
  id            Int               @id @default(autoincrement())
  name          String
  email         String?           @unique
  phone         String?
  fdRequesterId BigInt?           @unique
  ticketOrgId   Int?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  ticketOrg     TicketOrg?        @relation(fields: [ticketOrgId], references: [id])
  tickets       FreshdeskTicket[]

  @@index([ticketOrgId])
}

enum Prioridad {
  baja
  normal
  alta
}

enum EstadoVisita {
  PENDIENTE
  COMPLETADA
  CANCELADA
}
